/*
npm init

COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* selector universal, siempre aplican un cierto margen y paddin por defecto que no qeremos */
*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    /* padding y borders ya no se incluyen en los tamaños totales */
    /* box-sizing: border-box; */
    box-sizing: inherit;
}

/* aqui se setea el root */
html {
    /* para que sea lo que da el browser */
    font-size: 62.5%;
    /* font-size: 10px; */
}

/* las fuentes son heredadas */
body {
    /* para poner una franja blanca arededor de toda la pagina */
    padding: 3rem;
    font-family: 'Lato', sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    font-size: 1.6rem;
    line-height: 1.7; /*El espacio que hay entre una linea de texto y otra*/
    color: #777;

    box-sizing: border-box;
}

.header {
    /* el tamaño siempre sera el 95% de la altura total del tamaño de la vista */
    height: 95vh;
    /* se pueden poner varias cosas en una propiedad con comas y en este caso el que esta hasta arriba es el primero
    que se pone, se pueden poner varias direcctiones o solo una */
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(39, 180, 133, 0.8)),
        url('../img/hero.jpg');
    /* cual sea el tamaño del contenedor siempre va a hacer que entre dentro del contenedor */
    background-size: cover;
    /* hace que la parte de arriba de la imagen siempre este pegada al tope */
    background-position: top;

    position: relative;

    /* para clipear una parte creamos un poligono, debe de ser de acuerdo a las manecillas del reloj */
    /* clip-path: polygon(x y, x y, x y); */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
    /* top y left empiezan a contar desde el padre que tenga la posicion relativa */
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

/* .logo:hover {
    animation: moveInRight 13s ease-in;
} */

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /* background-color: blue; */
    /* hace que esto se aplique en relacion al elemento en sí  */
    transform: translate(-50%, -50%);

    /* para alinear el anchor */
    text-align: center;
}

.heading-primary {
    color: #ffffff;
    text-transform: uppercase;

    /* determina si la parte de atras d eun elemento esta escondida para arreglar el shaking al final de una animacion */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

.heading-primary--main {
    /* que ocupe todo el width */
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    /* para que funcione la animacion */
    animation-name: moveInLeft;
    animation-duration: 1s;

    /* que tan rapido suceden las animaciones */
    animation-timing-function: ease-out;

    /* pasa 3 veces */
    /* animation-iteration-count: 3; */
    /* lo que espera antes de suceder */
    /* animation-delay: 2s;  */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    /* para que funcione la animacion */
    animation-name: moveInRight;
    animation-duration: 1s;

    /* que tan rapido suceden las animaciones */
    animation-timing-function: ease-out;
}

/* recordemos que el x va de izquierda a derecha y el y de arriba a abajo */
/* nombre de la funcion */
@keyframes moveInLeft {
    /* inicio */
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    80% {
        transform: translate(1rem);
    }
    /* final */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    /* inicio */
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translate(-1rem);
    }
    /* final */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/* pseudo clase, es el estado de un elemnto cundo pasa aldo, el hover es una pseudo clase*/
/* para cuando funciona como link */
.btn:link,
/* cuando ya fue visitado */
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /* primero a los lados y luego arriba y abajo */
    padding: 1.5rem 4rem;
    /* si no lo ponemos como bloque solo seria como poner texto con un span */
    display: inline-block;
    /* como es inline block lo podemos tratar como texto */
    border-radius: 10rem;

    /* en la clase principal se pone el transition para que se vea la transcicion de propiedades */
    transition: all 0.2s;

    position: relative;
    font-size: 1.6rem;
}

/* estas posiciones se refieren a la ubicacion original */
.btn:hover {
    transform: translateY(-3px);
    /* offset-x | offset-y | blur-radius | color */
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}

/* esto es un pseaudo elemento, no una pseudo clase */
/* es tratado como un hijo del elemento original */
.btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* va a buscar el que tenga el relative */
    position: absolute;
    top: 0;
    left: 0;
    /* indice de posiciones, como los vas apilando */
    z-index: -1;

    transition: all 0.4s;
}

.btn--white {
    background-color: #ffffff;
    color: #777777;
}

.btn--white::after {
    background-color: #ffffff;
    /* background-color: red; */
}

/* un pseudo que solo se crea en el hover */
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated {
    animation: moveInBottom 0.5s ease-out 0.75s;
    /* con esto los estilos del inicio se aplicaran al estado inicial */
    animation-fill-mode: backwards;
}

@keyframes moveInBottom {
    /* inicio */
    0% {
        opacity: 0;
        transform: translateY(5rem);
    }
    /* 80% {
        transform: translate(-10px);
    } */
    /* final */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
